# -*- coding: utf-8 -*-
"""image_generation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y1jNs4PCxpUh5DO5Dph3qr_bArOjnif2
"""

# Install required libraries
!pip install diffusers transformers accelerate torch

# Import libraries
import torch
from diffusers import StableDiffusionPipeline

# Load the Stable Diffusion model
model_id = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda")

# Define the text prompt
prompt = "a serene sunset over a futuristic city"

# Generate 3 images
for i in range(3):
    # Generate an image
    image = pipe(prompt).images[0]

    # Save the image
    image_path = f"generated_image_{i+1}.png"
    image.save(image_path)
    print(f"Saved {image_path}")

# Install required libraries
!pip install pillow torchvision

# Import libraries
from PIL import Image
import torchvision.transforms as transforms

# Define preprocessing steps
preprocess = transforms.Compose([
    transforms.Resize((224, 224)),  # Resize to 224x224
    transforms.ToTensor(),          # Convert to tensor
    transforms.Normalize(           # Normalize to [0, 1]
        mean=[0.5, 0.5, 0.5],
        std=[0.5, 0.5, 0.5]
    )
])

# Preprocess each image
for i in range(3):
    # Load the image
    image_path = f"generated_image_{i+1}.png"
    image = Image.open(image_path)

    # Preprocess the image
    preprocessed_image = preprocess(image)

    # Save the preprocessed image (optional)
    preprocessed_image_path = f"preprocessed_image_{i+1}.pt"
    torch.save(preprocessed_image, preprocessed_image_path)
    print(f"Saved {preprocessed_image_path}")

# Download and install Julia
!wget https://julialang-s3.julialang.org/bin/linux/x64/1.9/julia-1.9.3-linux-x86_64.tar.gz
!tar -xvzf julia-1.9.3-linux-x86_64.tar.gz
!ln -s /content/julia-1.9.3/bin/julia /usr/local/bin/julia

# Verify installation
!julia --version

# Install Flux, Images, and FileIO
!julia -e 'using Pkg; Pkg.add("Flux")'
!julia -e 'using Pkg; Pkg.add("Images")'
!julia -e 'using Pkg; Pkg.add("FileIO")'

# Install numpy if not already installed
!pip install numpy

# Import libraries
import numpy as np
import torch

# Save the preprocessed image as a .npy file
preprocessed_image = torch.load("preprocessed_image_1.pt")  # Load the .pt file
preprocessed_image_np = preprocessed_image.numpy()  # Convert to numpy array
np.save("preprocessed_image_1.npy", preprocessed_image_np)  # Save as .npy
print("Saved preprocessed_image_1.npy")

!julia -e 'using Pkg; Pkg.add("NPZ")'

# Install Julia
!wget https://julialang-s3.julialang.org/bin/linux/x64/1.9/julia-1.9.3-linux-x86_64.tar.gz
!tar -xvzf julia-1.9.3-linux-x86_64.tar.gz
!ln -s /content/julia-1.9.3/bin/julia /usr/local/bin/julia

# Install Flux and NPZ packages
!julia -e 'using Pkg; Pkg.add("Flux")'
!julia -e 'using Pkg; Pkg.add("NPZ")'

# Write the Julia code to a file
julia_code = """
using Flux
using NPZ

# Define a minimal neural network
model = Chain(
    Conv((3, 3), 3 => 16, relu),  # Convolutional layer
    MaxPool((2, 2)),              # Max pooling
    Flux.flatten,                 # Flatten the output
    Dense(16 * 111 * 111, 10),    # Dense layer (output size 10)
    softmax                       # Softmax activation
)

# Load the preprocessed image from .npy file
preprocessed_image = NPZ.npzread("preprocessed_image_1.npy")

# Ensure the image is in the correct shape (1, 224, 224, 3)
input_image = reshape(preprocessed_image, (224, 224, 3, 1))

# Perform a forward pass
output = model(input_image)

# Print the output
println("Model output: ", output)
"""

with open("flux_forward_pass.jl", "w") as f:
    f.write(julia_code)

# Run the Julia script
!julia flux_forward_pass.jl